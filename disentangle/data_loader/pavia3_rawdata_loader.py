"""
Here, we load the raw data generated by Pezzotti from Pavia (2 channel data which does not have the input channel). 
"""
import os
from functools import partial

import numpy as np

from disentangle.core.custom_enum import Enum
from disentangle.core.data_split_type import DataSplitType, get_datasplit_tuples
from disentangle.core.tiff_reader import load_tiff
from disentangle.data_loader.multifile_raw_dloader import SubDsetType
from disentangle.data_loader.multifile_raw_dloader import get_train_val_data as get_train_val_data_twochannels
from nd2reader import ND2Reader


class Pavia3SeqPowerLevel(Enum):
    High = 'High'
    Medium = 'Medium'
    Low = 'Low'

    @staticmethod
    def subdir(power_level):
        return {
            Pavia3SeqPowerLevel.High: 'Main',
            Pavia3SeqPowerLevel.Medium: 'Divided_2',
            Pavia3SeqPowerLevel.Low: 'Divided_4'
        }[power_level]


class Pavia3SeqAlpha(Enum):
    Balanced = "Balanced"
    MediumSkew = "MediumSkew"
    HighSkew = "HighSkew"

    @staticmethod
    def subdir(alpha_level):
        return {
            Pavia3SeqAlpha.Balanced: 'Cond_1',
            Pavia3SeqAlpha.MediumSkew: 'Cond_2',
            Pavia3SeqAlpha.HighSkew: 'Cond_3'
        }[alpha_level]


def load_one_file(fpath):
    if get_extension(fpath) == 'nd2':
        return load_one_file_nd2(fpath)
    elif get_extension(fpath) == 'tif':
        return load_tiff(fpath)


def load_one_file_nd2(fpath):
    """
    '/group/jug/ashesh/data/pavia3_sequential/Cond_2/Main/1_002.nd2'
    """
    output = {}
    with ND2Reader(fpath) as fobj:
        for c in range(len(fobj.metadata['channels'])):
            output[c] = []
            for z in fobj.metadata['z_levels']:
                img = fobj.get_frame_2D(c=c, z=z)
                img = img[None, ..., None]
                output[c].append(img)
            output[c] = np.concatenate(output[c], axis=0)
    return np.concatenate([output[0], output[1]], axis=-1)


def get_extension(fpath):
    return os.path.basename(fpath).split('.')[-1]


def get_multi_channel_files(rootdatadir, power_level, alpha_level):
    dset_subdir = os.path.join(Pavia3SeqAlpha.subdir(alpha_level), Pavia3SeqPowerLevel.subdir(power_level))
    subdir = os.path.join(rootdatadir, dset_subdir)
    fpaths = []
    for fname in os.listdir(subdir):
        fpath = os.path.join(dset_subdir, fname)
        extension = get_extension(fpath)
        if extension == 'json':
            continue
        assert extension in ['tif', 'nd2']
        fpaths.append(fpath)

    fpaths = sorted(fpaths)
    return fpaths


def get_train_val_data(datadir, data_config, datasplit_type: DataSplitType, val_fraction=None, test_fraction=None):
    assert data_config.subdset_type == SubDsetType.MultiChannel
    power_level = data_config.power_level
    alpha_level = data_config.alpha_level
    assert power_level in [Pavia3SeqPowerLevel.High, Pavia3SeqPowerLevel.Medium, Pavia3SeqPowerLevel.Low], power_level
    assert alpha_level in [Pavia3SeqAlpha.Balanced, Pavia3SeqAlpha.MediumSkew, Pavia3SeqAlpha.HighSkew], alpha_level
    fpath_getter = partial(get_multi_channel_files, datadir, power_level, alpha_level)
    return get_train_val_data_twochannels(datadir,
                                          data_config,
                                          datasplit_type,
                                          fpath_getter,
                                          load_data_fn=load_one_file,
                                          val_fraction=val_fraction,
                                          test_fraction=test_fraction)


if __name__ == '__main__':

    # data = load_data('/group/jug/ashesh/data/pavia3_sequential_cropped', Pavia3SeqPowerLevel.High, Pavia3SeqAlpha.Balanced)
    # print(data.shape)
    from ml_collections.config_dict import ConfigDict
    data_config = ConfigDict()
    data_config.subdset_type = SubDsetType.MultiChannel
    data_config.power_level = Pavia3SeqPowerLevel.High
    data_config.alpha_level = Pavia3SeqAlpha.Balanced
    datadir = '/group/jug/ashesh/data/pavia4_HighSNR_cropped/Deconvolved'
    data = get_train_val_data(datadir, data_config, DataSplitType.Test, val_fraction=0.1, test_fraction=0.1)
    print(len(data))
